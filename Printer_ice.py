# **********************************************************************
#
# Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.5.1
#
# <auto-generated>
#
# Generated from file `Printer.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy

# Start of module Mp3
_M_Mp3 = Ice.openModule('Mp3')
__name__ = 'Mp3'

if '_t_ItemMusicSeq' not in _M_Mp3.__dict__:
    _M_Mp3._t_ItemMusicSeq = IcePy.defineSequence('::Mp3::ItemMusicSeq', (), IcePy._t_string)

if 'LecteurMp3' not in _M_Mp3.__dict__:
    _M_Mp3.LecteurMp3 = Ice.createTempClass()
    class LecteurMp3(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_Mp3.LecteurMp3:
                raise RuntimeError('Mp3.LecteurMp3 is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Mp3::LecteurMp3')

        def ice_id(self, current=None):
            return '::Mp3::LecteurMp3'

        def ice_staticId():
            return '::Mp3::LecteurMp3'
        ice_staticId = staticmethod(ice_staticId)

        def jouer(self, current=None):
            pass

        def pause(self, current=None):
            pass

        def stop(self, current=None):
            pass

        def selectedMusic(self, name, current=None):
            pass

        def getFilemp3(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Mp3._t_LecteurMp3)

        __repr__ = __str__

    _M_Mp3.LecteurMp3Prx = Ice.createTempClass()
    class LecteurMp3Prx(Ice.ObjectPrx):

        def jouer(self, _ctx=None):
            return _M_Mp3.LecteurMp3._op_jouer.invoke(self, ((), _ctx))

        def begin_jouer(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Mp3.LecteurMp3._op_jouer.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_jouer(self, _r):
            return _M_Mp3.LecteurMp3._op_jouer.end(self, _r)

        def pause(self, _ctx=None):
            return _M_Mp3.LecteurMp3._op_pause.invoke(self, ((), _ctx))

        def begin_pause(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Mp3.LecteurMp3._op_pause.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_pause(self, _r):
            return _M_Mp3.LecteurMp3._op_pause.end(self, _r)

        def stop(self, _ctx=None):
            return _M_Mp3.LecteurMp3._op_stop.invoke(self, ((), _ctx))

        def begin_stop(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Mp3.LecteurMp3._op_stop.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_stop(self, _r):
            return _M_Mp3.LecteurMp3._op_stop.end(self, _r)

        def selectedMusic(self, name, _ctx=None):
            return _M_Mp3.LecteurMp3._op_selectedMusic.invoke(self, ((name, ), _ctx))

        def begin_selectedMusic(self, name, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Mp3.LecteurMp3._op_selectedMusic.begin(self, ((name, ), _response, _ex, _sent, _ctx))

        def end_selectedMusic(self, _r):
            return _M_Mp3.LecteurMp3._op_selectedMusic.end(self, _r)

        def getFilemp3(self, _ctx=None):
            return _M_Mp3.LecteurMp3._op_getFilemp3.invoke(self, ((), _ctx))

        def begin_getFilemp3(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Mp3.LecteurMp3._op_getFilemp3.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getFilemp3(self, _r):
            return _M_Mp3.LecteurMp3._op_getFilemp3.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Mp3.LecteurMp3Prx.ice_checkedCast(proxy, '::Mp3::LecteurMp3', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Mp3.LecteurMp3Prx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_Mp3._t_LecteurMp3Prx = IcePy.defineProxy('::Mp3::LecteurMp3', LecteurMp3Prx)

    _M_Mp3._t_LecteurMp3 = IcePy.defineClass('::Mp3::LecteurMp3', LecteurMp3, -1, (), True, False, None, (), ())
    LecteurMp3._ice_type = _M_Mp3._t_LecteurMp3

    LecteurMp3._op_jouer = IcePy.Operation('jouer', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    LecteurMp3._op_pause = IcePy.Operation('pause', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    LecteurMp3._op_stop = IcePy.Operation('stop', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    LecteurMp3._op_selectedMusic = IcePy.Operation('selectedMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    LecteurMp3._op_getFilemp3 = IcePy.Operation('getFilemp3', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Mp3._t_ItemMusicSeq, False, 0), ())

    _M_Mp3.LecteurMp3 = LecteurMp3
    del LecteurMp3

    _M_Mp3.LecteurMp3Prx = LecteurMp3Prx
    del LecteurMp3Prx

# End of module Mp3
